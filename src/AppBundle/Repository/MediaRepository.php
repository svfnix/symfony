<?php

namespace AppBundle\Repository;
use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;

/**
 * FileRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class MediaRepository extends EntityRepository
{
    /**
     * @param $search
     * @param $page
     * @param $count
     * @param $order_by
     * @param $sort
     * @param $filters
     * @return Paginator
     */
    public function filter($search, $page, $count, $order_by, $sort, $filters)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->select('m')
            ->from('AppBundle:Media', 'm')
            ->join('m.owner', 'owner')
            ->join('m.parent', 'parent')
            ->join('m.children', 'children')
        ;

        if(!empty($search)) {

            $search = explode(' ', $search);
            foreach ($search as $q) {
                $qb->andWhere($qb->expr()->like('CONCAT(' . implode(", ' ', ", [
                        'm.name'
                    ]) . ')', $qb->expr()->literal('%' . $q . '%')));
            }
        }

        if(isset($filters['owner'])) {

            $qb
                ->andWhere('owner.id = :owner')
                ->setParameter('owner', $filters['owner'])
            ;
        }

        if(isset($filters['parent'])) {

            $qb
                ->andWhere('parent.id = :parent')
                ->setParameter('parent', $filters['parent'])
            ;
        }

        if(isset($filters['children'])) {

            $qb
                ->andWhere('m.children = :children')
                ->setParameter('children', $filters['children'])
            ;
        }

        if(!empty($order_by)) {
            if(in_array($order_by, ['owner'])){
                $qb->orderBy("{$order_by}.fullname", $sort);
            } elseif(in_array($order_by, ['parent', 'children'])){
                $qb->orderBy("{$order_by}.name", $sort);
            } else {
                $qb->orderBy("m.{$order_by}", $sort);
            }
        }

        $qb
            ->setFirstResult($page * $count)
            ->setMaxResults($count)
        ;

        return new Paginator($qb->getQuery());
    }
}
