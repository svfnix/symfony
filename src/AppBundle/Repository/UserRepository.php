<?php

namespace AppBundle\Repository;

use Doctrine\ORM\EntityRepository;
use Doctrine\ORM\Tools\Pagination\Paginator;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;


/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends EntityRepository implements UserProviderInterface
{

    /**
     * @param $id
     * @return User|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneById($id)
    {
        return $this
            ->createQueryBuilder('u')
            ->andWhere('u.id = :id')
            ->setParameter('id', $id)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param $username
     * @return User|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneByUsername($username)
    {
        return $this
            ->createQueryBuilder('u')
            ->andWhere('u.username = :username')
            ->setParameter('username', $username)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param $email
     * @return User|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneByEmail($email)
    {
        return $this
            ->createQueryBuilder('u')
            ->andWhere('u.email = :email')
            ->setParameter('email', $email)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param $username
     * @return User|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneByUsernameOrEmail($username)
    {
        return $this
            ->createQueryBuilder('u')
            ->andWhere('u.username = :username OR u.email = :email')
            ->setParameter('username', $username)
            ->setParameter('email', $username)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param $token
     * @return User|null
     * @throws \Doctrine\ORM\NonUniqueResultException
     */
    public function findOneByResetPasswordToken($token)
    {
        return $this
            ->createQueryBuilder('u')
            ->andWhere('u.reset_password_token = :token')
            ->setParameter('token', $token)
            ->getQuery()
            ->getOneOrNullResult();
    }

    /**
     * @param string $username
     * @return User
     */
    public function loadUserByUsername($username)
    {
        $user = $this->findOneByUsernameOrEmail($username);
        if(!user){
            throw new UsernameNotFoundException(sprintf('No user found for %s', $username));
        }

        return $user;
    }

    /**
     * @param UserInterface $user
     * @return object
     */
    public function refreshUser(UserInterface $user)
    {
        $class = get_class($user);
        if(!$this->supportsClass($class)) {
            throw new UnsupportedUserException(sprintf(
                "Instances of %s are not supported.",
                $class
            ));
        }

        if(!$refreshedUser = $this->find($user->getId())) {
            throw new UsernameNotFoundException(sprintf("User with id %s not found", json_encode($user->getId())));
        }

        return $refreshedUser;
    }

    /**
     * @param string $class
     * @return bool
     */
    public function supportsClass($class)
    {
        return $this->getEntityName() === $class
        || is_subclass_of($class, $this->getEntityName());
    }


    /**
     * @param $search
     * @param $page
     * @param $count
     * @param $order_by
     * @param $sort
     * @param $filters
     * @return Paginator
     */
    public function filter($search, $page, $count, $order_by, $sort, $filters)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->select('u')
            ->from('AppBundle:User', 'u')
        ;

        if(isset($filters['usergroup'])) {

            $qb
                ->join('u.usergroups', 'ug')
                ->where('ug.id = :id')
                ->setParameter('id', $filters['usergroup'])
            ;
        }

        if(!empty($search)) {

            $search = explode(' ', $search);
            foreach ($search as $q) {
                $qb->andWhere($qb->expr()->like('CONCAT(' . implode(", ' ', ", [
                        'u.fullname',
                        'u.email',
                        'u.mobile'
                    ]) . ')', $qb->expr()->literal('%' . $q . '%')));
            }
        }

        if(isset($filters['role'])) {

            $qb
                ->andWhere('u.role = :role')
                ->setParameter('role', $filters['role'])
            ;
        }

        if(!empty($order_by)) {
            $qb->orderBy("u.{$order_by}", $sort);
        }

        $qb
            ->setFirstResult($page * $count)
            ->setMaxResults($count)
        ;

        return new Paginator($qb->getQuery());
    }

    /**
     * @param $ids
     */
    public function bulkDelete($ids)
    {
        $qb = $this->getEntityManager()->createQueryBuilder();
        $qb
            ->delete('AppBundle:UserGroup', 'ug')
            ->where($qb->expr()->in('ug.id', $ids))
            ->getQuery()
            ->execute()
        ;
    }
}
